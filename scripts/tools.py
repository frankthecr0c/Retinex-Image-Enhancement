import yaml
import sys
import argparse
from abc import ABC, abstractmethod
from cv_bridge import CvBridge, CvBridgeError
from dynamic_reconfigure.server import Server
import os
from pathlib import Path
import logging
import cv2


def are_all_images(folder_path):
    """
  Checks if all files in a folder are images using OpenCV.

  Args:
    folder_path: The path to the folder.

  Returns:
    True if all files in the folder are images, False otherwise.
  """
    for filename in os.listdir(folder_path):
        file_path = os.path.join(folder_path, filename)
        if os.path.isfile(file_path):
            try:
                # Try to read the image using OpenCV
                img = cv2.imread(file_path)
                # Check if the image was loaded successfully
                if img is None:
                    return False
            except cv2.error:
                return False
    return True


def check_folder(folder_path):
    if not Path(folder_path).exists():
        raise FileNotFoundError
    else:
        return folder_path


def str2bool(v):
    if isinstance(v, bool):
        return v
    if v.lower() in ('yes', 'true', 't', 'y', '1', "True", "Yes", "YES"):
        return True
    elif v.lower() in ('no', 'false', 'f', 'n', '0', "False", "No", "NO"):
        return False
    else:
        raise argparse.ArgumentTypeError('Boolean value expected.')


def yaml_parser(yaml_path):
    with open(yaml_path, "r") as stream:
        try:
            config_loaded = yaml.safe_load(stream)
        except yaml.YAMLError:
            msg = "Error while loading the yaml file : {}".format(yaml_path)
            print(msg)
            sys.exit(1)
    return config_loaded


class RosparamServer:
    """
    These first few lines are pretty simply we
     just set up ROS and import dynamic_reconfigure as well as our config type.
     The name TutorialsConfig is automatically generated by appending Config
     o the 3rd argument in gen.generate
    """

    def __init__(self, config_name):
        self.srv = Server(config_name, self._srv_callback)

    def _srv_callback(self, config, level):
        return config


class RosBr(ABC):
    def __init__(self):
        """

        :rtype: object
        """
        self.bridge = CvBridge()

    @abstractmethod
    def ros2cv(self, img_msg):
        pass

    @abstractmethod
    def cv2ros(self, cv_img):
        pass


class CvBr(RosBr):

    def __init__(self, ros2cv_encoding="passthrough", cv2ros_encoding="passthrough"):
        self.ros2cv_encoding = ros2cv_encoding
        self.cv2ros_encoding = cv2ros_encoding

        """
            :param cv2ros_encoding:  The format of the image data, one of the following strings:

               * from http://docs.opencv.org/2.4/modules/highgui/doc/reading_and_writing_images_and_video.html
               * from http://docs.opencv.org/2.4/modules/highgui/doc/reading_and_writing_images_and_video.html#Mat imread(const string& filename, int flags)
               * bmp, dib
               * jpeg, jpg, jpe
               * jp2
               * png
               * pbm, pgm, ppm
               * sr, ras
               * tiff, tif
            """

        super().__init__()

    def ros2cv(self, img_msg):
        try:
            return self.bridge.imgmsg_to_cv2(img_msg, desired_encoding=self.ros2cv_encoding)
        except CvBridgeError as e:
            msg = "Error while trying to convert ROS image to OpenCV: {}".format(e)
            print(msg)

    def cv2ros(self, cv_img):
        try:
            return self.bridge.cv2_to_imgmsg(cv_img, encoding=self.cv2ros_encoding)
        except CvBridgeError as e:
            msg = "Error while trying to convert ROS image to OpenCV: {}".format(e)
            print(msg)


class CvBrComp(RosBr):

    def __init__(self, ros2cv_encoding="passthrough", cv2ros_comp="jpg"):
        self.ros2cv_encoding = ros2cv_encoding
        self.cv2ros_compr = cv2ros_comp
        super().__init__()

    def ros2cv(self, img_msg):
        try:
            return self.bridge.compressed_imgmsg_to_cv2(img_msg, desired_encoding=self.ros2cv_encoding)
        except CvBridgeError as e:
            msg = "Error while trying to convert ROS image to OpenCV: {}".format(e)
            print(msg)

    def cv2ros(self, cv_img):

        try:
            return self.bridge.cv2_to_compressed_imgmsg(cv_img, dst_format=self.cv2ros_compr)
        except CvBridgeError as e:
            msg = "Error while trying to convert ROS image to OpenCV: {}".format(e)
            print(msg)


class FolderCreator:
    def __init__(self, path, log_ref: logging = None):
        self.path = os.path.abspath(path)
        try:
            os.makedirs(self.path, exist_ok=False)
            msg_log = ''.join(["Folder {} created".format(self.path)])
            if log_ref:
                log_ref.debug(msg_log)
            else:
                print(msg_log)
        except Exception as e:
            msg_log = ''.join(["Error while creating the folder: ", str(self.path), "\n", str(e)])
            if log_ref:
                log_ref.error(msg_log)
            else:
                print(msg_log)
            sys.exit(1)

    def get_path(self):
        return self.path
